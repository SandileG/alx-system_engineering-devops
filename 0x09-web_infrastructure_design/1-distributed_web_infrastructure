https://drive.google.com/file/d/1sDTrxhADTkSK6ieNj4bP_Bs2SxfgPqTt/view?usp=sharing

Designing a Three-Server Web Infrastructure for www.foobar.com

Components:

Load Balancer (HAproxy):

Distributes incoming web traffic across multiple servers to ensure optimal performance and high availability. 
Why: Added to evenly distribute traffic and prevent overload on individual servers.

Web Servers (Nginx):

Hosts and serves web content, including static files and dynamic content generated by the application server.
Why: Utilized to handle HTTP requests and serve web pages to clients.

Application Server:

Executes application logic, processes dynamic content, and interacts with the database server.
Why: Responsible for handling application-specific tasks and processing user requests.

Database (MySQL):

Stores and manages website data, including user information, content, and other structured data.
Why: Used to persistently store and retrieve application data.

Load Balancer Configuration:

The load balancer is configured with a round-robin distribution algorithm. This algorithm evenly distributes incoming requests among the available servers in a circular manner.

Active-Active vs. Active-Passive Setup:

The load balancer enables an Active-Active setup, where all servers actively handle incoming requests simultaneously.

Difference:

Active-Active: All servers are actively serving traffic, providing increased capacity and fault tolerance.
Active-Passive: Only one server actively serves traffic, while others remain on standby. In the event of failure, the passive server becomes active.

Database Primary-Replica (Master-Slave) Cluster:

In a Primary-Replica cluster, the Primary (Master) node handles write operations and replicates data to Replica (Slave) nodes, which handle read operations.

How it Works:

Write operations are performed on the Primary node, which then replicates the changes to Replica nodes asynchronously.
Read operations can be distributed among Replica nodes to improve performance and scalability.

Difference between Primary and Replica Nodes:

Primary Node:

Handles write operations and updates to the database.
Interacts with the application server to process write requests.
Replica Node:
Receives replicated data from the Primary node.
Primarily handles read operations, serving as a backup for data retrieval.

Issues with the Infrastructure:

Single Point of Failure (SPOF):

The load balancer may become a single point of failure if it fails, disrupting traffic distribution.

Security Issues:

Lack of firewall protection exposes servers to potential security threats.
Absence of HTTPS encryption leaves communications vulnerable to interception.

No Monitoring:

Without monitoring tools, it's challenging to detect and address performance issues, security breaches, or server failures proactively.
